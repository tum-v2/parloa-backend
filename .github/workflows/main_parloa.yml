name: CI/CD Workflow

on:
  workflow_dispatch:
    inputs:
      run_test:
        description: 'Run tests'
        required: false
        default: 'false'
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  check-out:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  build-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18
      
      - name: Set up environment variables
        run: |
          touch .env
          echo "MONGODB_USER=${{ secrets.MONGODB_USER }}" >> .env
          echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env
          echo "MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}" >> .env
          echo "MONGODB_LOCAL_PORT=${{ secrets.MONGODB_LOCAL_PORT }}" >> .env
          echo "MONGODB_DOCKER_PORT=${{ secrets.MONGODB_DOCKER_PORT }}" >> .env
          echo "NODE_LOCAL_PORT=${{ secrets.NODE_LOCAL_PORT }}" >> .env
          echo "NODE_DOCKER_PORT=${{ secrets.NODE_DOCKER_PORT }}" >> .env
          echo "MONGOEXPRESS_LOCAL_PORT=${{ secrets.MONGOEXPRESS_LOCAL_PORT }}" >> .env
          echo "MONGOEXPRESS_DOCKER_PORT=${{ secrets.MONGOEXPRESS_DOCKER_PORT }}" >> .env
          echo "MONGOEXPRESS_BASICAUTH_USERNAME=${{ secrets.MONGOEXPRESS_BASICAUTH_USERNAME }}" >> .env
          echo "MONGOEXPRESS_BASICAUTH_PASSWORD=${{ secrets.MONGOEXPRESS_BASICAUTH_PASSWORD }}" >> .env

      - name: Install dependencies
        run: npm install
      
      - name: Start containers
        run: docker-compose -f "docker-compose.yml" up -d --build

      - name: Run ESLint
        run: npm run lint
        
      - name: Run tests 
        if: ${{ github.event.inputs.run_test == 'true' }}
        run: npm run test
  
  stop-containers:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    needs: build-dev
    steps:
      - name: Stop containers
        if: always()
        run: docker-compose -f "docker-compose.yml" down

  build-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to registry
      uses: docker/login-action@v2
      with:
        registry: https://parloaacr.azurecr.io/
        username: ${{ secrets.AzureAppService_ContainerUsername_978d68c9548f47dead351d8f62fce38a }}
        password: ${{ secrets.AzureAppService_ContainerPassword_1ccc76ff28a74e59b2b1e651bf4d0e2d }}

    - name: Build and push container image to registry
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: parloaacr.azurecr.io/${{ secrets.AzureAppService_ContainerUsername_978d68c9548f47dead351d8f62fce38a }}/parloa:${{ github.sha }}
        file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build-prod
    if: github.ref == 'refs/heads/main'
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'parloa'
        slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_fd051c3bedd3409d838a8d81514d3631 }}
        images: 'parloaacr.azurecr.io/${{ secrets.AzureAppService_ContainerUsername_978d68c9548f47dead351d8f62fce38a }}/parloa:${{ github.sha }}'